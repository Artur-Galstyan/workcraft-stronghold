<script defer>\n            let socket = null;\n            let totalPages = 0;\n            let currentPage = 0;\n\n            function keepReconnecting() {\n                if (socket === null) {\n                    console.log('No socket, reconnecting');\n                    socket = window.getWebsocket();\n                    socket.onopen = function() {\n                        console.log('Connected');\n                        reconnectAttempts = 0;\n                    };\n                    socket.onmessage = function(e) {\n                        const data = JSON.parse(e.data);\n                        if (data.type === 'task_update') {\n                            updateTaskRow(data.message.task);\n                        }\n                    };\n                    socket.onerror = function(error) {\n                        console.error('WebSocket error:', error);\n                    };\n                    socket.onclose = function(e) {\n                        console.log('Disconnected:', e.code, e.reason);\n                        socket = null;\n                    };\n                }\n            }\n\n            function getStatusClass(status) {\n                return window.getStatusColor(status);\n            }\n\n            function updateTaskRow(task) {\n                const row = document.getElementById(`task-${task.id}`);\n                if (!row) {\n                    return;\n                }\n\n                const createdAt = new Date(task.created_at).toLocaleString('en-US', {\n                    year: 'numeric',\n                    month: '2-digit',\n                    day: '2-digit',\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    second: '2-digit'\n                });\n\n                row.innerHTML = `\n                    <td class=\"px-4 py-3 border-b\">\n                        <a href=\"/task/${task.id}\" class=\"text-blue-600 hover:underline\">\n                            ${task.id}\n                        </a>\n                    </td>\n                    <td class=\"px-4 py-3 border-b\">\n                        <span class=\"px-2 py-1 rounded-full text-sm inline-block ${window.getStatusColor(task.status)}\">\n                            ${task.status}\n                        </span>\n                    </td>\n                    <td class=\"px-4 py-3 border-b font-mono text-sm\">${task.task_name}</td>\n                    <td class=\"px-4 py-3 border-b\">${createdAt}</td>\n                    <td class=\"px-4 py-3 border-b\">${task.queue || 'DEFAULT'}</td>\n                    <td class=\"px-4 py-3 border-b\">\n                        ${task.peon_id ?\n                            `<a href=\"/peon/${task.peon_id}\" class=\"text-blue-600 hover:underline\">\n                                ${task.peon_id}\n                            </a>` :\n                            '<span class=\"text-gray-500\">Not assigned</span>'\n                        }\n                    </td>\n                `;\n            }\n            async function pollTaskData() {\n                try {\n                    const queryParams = new URLSearchParams(window.location.search);\n                    currentPage = parseInt(queryParams.get('page')) || 0;\n\n                    const query = {\n                        page: currentPage,\n                        per_page: parseInt(queryParams.get('per_page')) || 30,\n                        order: {\n                            field: queryParams.get('sort') || 'created_at',\n                            dir: queryParams.get('dir') || 'DESC'\n                        }\n                    };\n\n                    const response = await fetch(`/api/tasks?query=${JSON.stringify(query)}`);\n                    if (!response.ok) throw new Error('Failed to fetch task data');\n                    const data = await response.json();\n                    totalPages = data.total_pages;\n                    updateTaskTable(data.items);\n                    updatePaginationButtons();\n                } catch (error) {\n                    console.error('Error polling task data:', error);\n                }\n            }\n\n            function updateTaskTable(tasks) {\n                const tbody = document.getElementById('tasks-table');\n                tbody.innerHTML = '';\n\n                if (tasks.length === 0) {\n                    tbody.innerHTML = `\n                        <tr>\n                            <td colspan=\"6\" class=\"text-center py-4 text-gray-500\">\n                                No tasks found\n                            </td>\n                        </tr>\n                    `;\n                    return;\n                }\n\n                tasks.forEach(task => {\n                    const row = document.createElement('tr');\n                    row.id = `task-${task.id}`;\n                    row.className = 'hover:bg-gray-50';\n                    const createdAt = new Date(task.created_at).toLocaleString('en-US', {\n                        year: 'numeric',\n                        month: '2-digit',\n                        day: '2-digit',\n                        hour: '2-digit',\n                        minute: '2-digit',\n                        second: '2-digit'\n                    });\n\n                    row.innerHTML = `\n                        <td class=\"px-4 py-3 border-b\">\n                            <a href=\"/task/${task.id}\" class=\"text-blue-600 hover:underline\">\n                                ${task.id}\n                            </a>\n                        </td>\n                        <td class=\"px-4 py-3 border-b\">\n                            <span class=\"px-2 py-1 rounded-full text-sm inline-block ${getStatusClass(task.status)}\">\n                                ${task.status}\n                            </span>\n                        </td>\n                        <td class=\"px-4 py-3 border-b\">${task.task_name}</td>\n                        <td class=\"px-4 py-3 border-b\">${createdAt}</td>\n                        <td class=\"px-4 py-3 border-b\">${task.queue}</td>\n                        <td class=\"px-4 py-3 border-b\">\n                            ${task.peon_id ?\n                                `<a href=\"/peon/${task.peon_id}\" class=\"text-blue-600 hover:underline\">\n                                    ${task.peon_id}\n                                </a>` :\n                                '<span class=\"text-gray-500\">Not assigned</span>'\n                            }\n                        </td>\n                    `;\n                    tbody.appendChild(row);\n                });\n            }\n\n            function updatePaginationButtons() {\n                const prevButton = document.querySelector('button[onclick=\"prevPage()\"]');\n                const nextButton = document.querySelector('button[onclick=\"nextPage()\"]');\n\n                if (prevButton) {\n                    prevButton.disabled = currentPage <= 0;\n                }\n                if (nextButton) {\n                    nextButton.disabled = currentPage >= totalPages - 1;\n                }\n            }\n\n            async function joinPage(page) {\n                if (page < 0 || page >= totalPages) {\n                    return;\n                }\n\n                const queryParams = new URLSearchParams(window.location.search);\n                queryParams.set('page', page);\n\n                window.history.pushState(\n                    { page },\n                    '',\n                    `${window.location.pathname}?${queryParams.toString()}`\n                );\n\n                currentPage = page;\n                await pollTaskData();\n            }\n\n            async function prevPage() {\n                if (currentPage > 0) {\n                    await joinPage(currentPage - 1);\n                }\n            }\n\n            async function nextPage() {\n                if (currentPage < totalPages - 1) {\n                    await joinPage(currentPage + 1);\n                }\n            }\n\n            window.addEventListener('popstate', async (event) => {\n                await pollTaskData();\n            });\n\n            $(document).ready(async function() {\n                console.log('Document ready');\n                await pollTaskData();\n                setInterval(keepReconnecting, 1000);\n                setInterval(pollTaskData, 5000);\n            });\n        </script> <div class=\"max-w-6xl mx-auto p-6\"><div class=\"bg-gray-50 rounded-lg shadow-sm border border-gray-200 p-6\"><div class=\"flex justify-between items-center mb-6\"><h1 class=\"text-2xl font-bold text-gray-700\">All Tasks</h1><div class=\"flex\"><div class=\"join grid grid-cols-2\"><button onclick=\"prevPage()\" class=\"join-item btn btn-outline\">Previous page</button> <button onclick=\"nextPage()\" class=\"join-item btn btn-outline\">Next</button></div></div></div><div class=\"overflow-x-auto\"><table class=\"min-w-full\"><thead class=\"bg-gray-100\"><tr><th class=\"px-4 py-3 text-left text-sm font-semibold text-gray-900 border-b\">Task ID</th><th class=\"px-4 py-3 text-left text-sm font-semibold text-gray-900 border-b\">Status</th><th class=\"px-4 py-3 text-left text-sm font-semibold text-gray-900 border-b\">Task Name</th><th class=\"px-4 py-3 text-left text-sm font-semibold text-gray-900 border-b\">Created At</th><th class=\"px-4 py-3 text-left text-sm font-semibold text-gray-900 border-b\">Queue</th><th class=\"px-4 py-3 text-left text-sm font-semibold text-gray-900 border-b\">Assigned To</th></tr></thead> <tbody id=\"tasks-table\"><tr><td colspan=\"6\" class=\"text-center py-4 text-gray-500\">Loading...</td></tr></tbody></table></div></div></div>
