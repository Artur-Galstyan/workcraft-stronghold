<script defer>\n        let totalPages = 0;\n        let currentPage = 0;\n\n        const sse = window.getSSE();\n\n        console.log('No SSE, reconnecting');\n\n        sse.onopen = function() {\n            console.log('Connected');\n        };\n\n        sse.onmessage = function(e) {\n            console.log(e)\n            const data = JSON.parse(e.data);\n            if (data.type === 'peon_update') {\n                // Update single row in the table\n                updatePeonRow(data.message.peon);\n            }\n        };\n        sse.onerror = function(error) {\n            console.error('WebSocket error:', error);\n        };\n\n\n        function updatePeonRow(peon) {\n            const row = document.getElementById(`peon-${peon.id}`);\n            if (!row) {\n                return; // Don't trigger a refresh, let the normal polling handle it\n            }\n\n            const timestamp = new Date(peon.last_heartbeat)\n                .toLocaleString('en-US', {\n                    year: 'numeric',\n                    month: '2-digit',\n                    day: '2-digit',\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    second: '2-digit'\n                });\n\n            row.innerHTML = `\n                <td class=\"px-4 py-3 border-b\">\n                <a href=\"/peon/${peon.id}\" class=\"text-blue-600 hover:underline\">\n                ${peon.id}\n                </a>\n                </td>\n                <td class=\"px-4 py-3 border-b\">\n                <span class=\"px-2 py-1 rounded-full text-sm inline-block ${\n                peon.status === 'IDLE' ? 'bg-green-100 text-green-800' :\n                peon.status === 'OFFLINE' ? 'bg-gray-100 text-gray-800' :\n                'bg-yellow-100 text-yellow-800'\n                }\">\n                ${peon.status}\n                </span>\n                </td>\n                <td class=\"px-4 py-3 border-b\">${timestamp}</td>\n                <td class=\"px-4 py-3 border-b\">${peon.queues || 'DEFAULT'}</td>\n                <td class=\"px-4 py-3 border-b\">\n                ${peon.current_task ?\n                `<a href=\"/task/${peon.current_task}\" class=\"text-blue-600 hover:underline\">\n                ${peon.current_task}\n                </a>` :\n                '<span class=\"text-gray-500\">No active task</span>'\n                }\n                </td>\n                `;\n        }\n\n        function updatePeonTable(peons) {\n            const tbody = document.getElementById('peons-table');\n            tbody.innerHTML = '';\n\n            if (peons.length === 0) {\n                tbody.innerHTML = `\n                    <tr>\n                    <td colspan=\"5\" class=\"text-center py-4 text-gray-500\">\n                    No peons found\n                    </td>\n                    </tr>\n                    `;\n                return;\n            }\n\n            peons.forEach(peon => {\n                const row = document.createElement('tr');\n                row.id = `peon-${peon.id}`;\n                row.className = 'hover:bg-gray-50';\n\n                // Instead of calling updatePeonRow, set the innerHTML directly\n                const timestamp = new Date(peon.last_heartbeat)\n                    .toLocaleString('en-US', {\n                        year: 'numeric',\n                        month: '2-digit',\n                        day: '2-digit',\n                        hour: '2-digit',\n                        minute: '2-digit',\n                        second: '2-digit'\n                    });\n\n                row.innerHTML = `\n                    <td class=\"px-4 py-3 border-b\">\n                    <a href=\"/peon/${peon.id}\" class=\"text-blue-600 hover:underline\">\n                    ${peon.id}\n                    </a>\n                    </td>\n                    <td class=\"px-4 py-3 border-b\">\n                    <span class=\"px-2 py-1 rounded-full text-sm inline-block ${\n                    peon.status === 'IDLE' ? 'bg-green-100 text-green-800' :\n                    peon.status === 'OFFLINE' ? 'bg-gray-100 text-gray-800' :\n                    'bg-yellow-100 text-yellow-800'\n                    }\">\n                    ${peon.status}\n                    </span>\n                    </td>\n                    <td class=\"px-4 py-3 border-b\">${timestamp}</td>\n                    <td class=\"px-4 py-3 border-b\">${peon.queues || 'DEFAULT'}</td>\n                    <td class=\"px-4 py-3 border-b\">\n                    ${peon.current_task ?\n                    `<a href=\"/task/${peon.current_task}\" class=\"text-blue-600 hover:underline\">\n                    ${peon.current_task}</a>` : '<span class=\"text-gray-500\">No active task</span>'}\n                    </td>\n                    `;\n                tbody.appendChild(row);\n            });\n        }\n\n        async function pollPeonData() {\n            try {\n                const queryParams = new URLSearchParams(window.location.search);\n                currentPage = parseInt(queryParams.get('page')) || 0;\n\n                const query = {\n                    page: currentPage,\n                    per_page: parseInt(queryParams.get('per_page')) || 30,\n                    order: {\n                        field: queryParams.get('sort') || 'last_heartbeat',\n                        dir: queryParams.get('dir') || 'DESC'\n                    }\n                };\n\n                const response = await fetch(`/api/peons?query=${JSON.stringify(query)}`);\n                if (!response.ok) throw new Error('Failed to fetch peon data');\n                const data = await response.json();\n                totalPages = data.total_pages;\n                updatePeonTable(data.items);\n                updatePaginationButtons();\n            } catch (error) {\n                console.error('Error polling peon data:', error);\n            }\n        }\n\n        function updatePaginationButtons() {\n            const prevButton = document.querySelector('button[onclick=\"prevPage()\"]');\n            const nextButton = document.querySelector('button[onclick=\"nextPage()\"]');\n\n            if (prevButton) {\n                prevButton.disabled = currentPage <= 0;\n            }\n            if (nextButton) {\n                nextButton.disabled = currentPage >= totalPages - 1;\n            }\n        }\n\n        async function joinPage(page) {\n            if (page < 0 || page >= totalPages) {\n                return;\n            }\n\n            const queryParams = new URLSearchParams(window.location.search);\n            queryParams.set('page', page);\n\n            // Update URL without page refresh\n            window.history.pushState(\n                { page },\n                '',\n                `${window.location.pathname}?${queryParams.toString()}`\n            );\n\n            currentPage = page;\n            await pollPeonData();\n        }\n\n        async function prevPage() {\n            if (currentPage > 0) {\n                await joinPage(currentPage - 1);\n            }\n        }\n\n        async function nextPage() {\n            if (currentPage < totalPages - 1) {\n                await joinPage(currentPage + 1);\n            }\n        }\n\n        // Add event listener for browser back/forward buttons\n        window.addEventListener('popstate', async (event) => {\n            await pollPeonData();\n        });\n\n        $(document).ready(async function() {\n            console.log('Document ready');\n            await pollPeonData();\n            setInterval(pollPeonData, 5000);\n        });\n\n\n        </script> <div class=\"max-w-6xl mx-auto p-6\"><div class=\"bg-gray-50 rounded-lg shadow-sm border border-gray-200 p-6\"><div class=\"flex justify-between items-center mb-6\"><h1 class=\"text-2xl font-bold text-gray-700\">All Peons</h1><div class=\"flex\"><div class=\"join grid grid-cols-2\"><button onclick=\"prevPage()\" class=\"join-item btn btn-outline\">Previous page</button> <button onclick=\"nextPage()\" class=\"join-item btn btn-outline\">Next</button></div></div></div><div class=\"overflow-x-auto\"><table class=\"min-w-full\"><thead class=\"bg-gray-100\"><tr><th class=\"px-4 py-3 text-left text-sm font-semibold text-gray-900 border-b\">Peon ID</th><th class=\"px-4 py-3 text-left text-sm font-semibold text-gray-900 border-b\">Status</th><th class=\"px-4 py-3 text-left text-sm font-semibold text-gray-900 border-b\">Last Heartbeat</th><th class=\"px-4 py-3 text-left text-sm font-semibold text-gray-900 border-b\">Queues</th><th class=\"px-4 py-3 text-left text-sm font-semibold text-gray-900 border-b\">Current Task</th></tr></thead> <tbody id=\"peons-table\"><tr><td colspan=\"5\" class=\"text-center py-4 text-gray-500\">Loading...</td></tr></tbody></table></div></div></div>
