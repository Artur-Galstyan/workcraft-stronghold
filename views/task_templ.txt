 <script defer>\n            let socket = null;\n            const taskID = JSON.parse(document.getElementById('taskID').innerText);\n            console.log('Task ID:', taskID);\n\n            function keepReconnecting() {\n                if (socket === null) {\n                    console.log('No socket, reconnecting');\n                    socket = window.getWebsocket();\n\n                    socket.onopen = function() {\n                        console.log('Connected');\n                    };\n\n                    socket.onmessage = function(e) {\n                        const data = JSON.parse(e.data);\n                        if (data.type === 'task_update' && data.message.task.id === taskID) {\n                            updateTask(data.message.task);\n                        }\n                    };\n\n                    socket.onerror = function(error) {\n                        console.error('WebSocket error:', error);\n                    };\n\n                    socket.onclose = function(e) {\n                        console.log('Disconnected:', e.code, e.reason);\n                        socket = null;\n                    };\n                }\n            }\n\n            function updateTask(task) {\n                // Update status with color coding\n                const statusEl = document.getElementById('task-status');\n                statusEl.textContent = task.status;\n                statusEl.className = `px-2 py-1 rounded-full text-sm inline-block ${getStatusColor(task.status)}`;\n\n                // Update timestamps\n                if (task.created_at) {\n                    document.getElementById('created-at').textContent = formatDateTime(task.created_at);\n                }\n                if (task.updated_at) {\n                    document.getElementById('updated-at').textContent = formatDateTime(task.updated_at);\n                }\n\n                // Update queue\n                document.getElementById('queue').textContent = task.queue || 'DEFAULT';\n\n                // Update retries\n                document.getElementById('retry-count').textContent = `${task.retry_count} / ${task.retry_limit}`;\n\n                // Update peon link\n                const peonEl = document.getElementById('peon-link');\n                if (task.peon_id) {\n                    peonEl.href = `/peon/${task.peon_id}`;\n                    peonEl.textContent = task.peon_id;\n                    peonEl.className = 'text-blue-600 hover:underline';\n                } else {\n                    peonEl.removeAttribute('href');\n                    peonEl.textContent = 'No peon assigned';\n                    peonEl.className = 'text-gray-500';\n                }\n\n                // Update result\n                const resultEl = document.getElementById('result');\n                if (task.result) {\n                    resultEl.textContent = JSON.stringify(task.result, null, 2);\n                    resultEl.className = 'font-mono text-sm bg-gray-100 p-4 rounded-lg overflow-auto max-h-96';\n                } else {\n                    resultEl.textContent = 'No result';\n                    resultEl.className = 'text-gray-500';\n                }\n                const payloadEl = document.getElementById('payload');\n                if (task.payload) {\n                    payloadEl.textContent = JSON.stringify(task.payload, null, 2);\n                    payloadEl.className = 'font-mono text-sm bg-gray-100 p-4 rounded-lg overflow-auto max-h-96';\n                } else {\n                    payloadEl.textContent = 'No payload';\n                    payloadEl.className = 'text-gray-500';\n                }\n            }\n\n\n            function formatDateTime(dateString) {\n                return new Date(dateString).toLocaleString('en-US', {\n                    year: 'numeric',\n                    month: '2-digit',\n                    day: '2-digit',\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    second: '2-digit'\n                });\n            }\n\n            async function pollTaskData() {\n                try {\n                    const response = await fetch(`/api/task/${taskID}`);\n                    if (!response.ok) throw new Error('Failed to fetch task data');\n\n                    const task = await response.json();\n\n                    updateTask(task);\n                } catch (error) {\n                    console.error('Error polling task data:', error);\n                }\n            }\n\n            $(document).ready(function() {\n                console.log('Document ready');\n                pollTaskData();\n\n                setInterval(keepReconnecting, 1000);\n                setInterval(pollTaskData, 5000);\n            });\n\n            async function cancelTask() {\n                try {\n                    const response = await fetch(`/api/task/${taskID}/cancel`, { method: 'POST' });\n                    if (!response.ok) throw new Error(await response.text());\n                    const data = await response.json();\n                    console.log('Task cancelled:', data);\n                    window.Toast.fire({\n                      icon: \"success\",\n                      title: \"Cancelled task!\"\n                    });\n                } catch (error) {\n                    console.error('Error cancelling task:', error);\n                    window.Toast.fire({\n                      icon: \"error\",\n                      title: \"Failed to cancel task: \" + error.message\n                    });\n                }\n            }\n\n        </script> <div class=\"max-w-4xl mx-auto p-6\"><!-- Task Status Card --><div class=\"bg-gray-50 rounded-lg shadow-sm border border-gray-200 p-6 mb-8\"><h1 class=\"text-2xl font-bold mb-6 text-gray-700\">Task Details</h1><div class=\"grid gap-6 md:grid-cols-2\"><div class=\"space-y-4\"><div class=\"flex items-center gap-2\"><span class=\"font-medium text-gray-600\">ID:</span> <span class=\"font-mono text-sm\">
</span></div><div class=\"flex items-center gap-2\"><span class=\"font-medium text-gray-600\">Name:</span> <span class=\"text-gray-700\">
</span></div><div class=\"flex items-center gap-2\"><span class=\"font-medium text-gray-600\">Status:</span> 
<span id=\"task-status\" class=\"
\">
</span></div></div><div class=\"space-y-4\"><div class=\"flex items-center gap-2\"><span class=\"font-medium text-gray-600\">Created:</span> <span id=\"created-at\" class=\"text-gray-600\">Loading...</span></div><div class=\"flex items-center gap-2\"><span class=\"font-medium text-gray-600\">Updated:</span> <span id=\"updated-at\" class=\"text-gray-600\">Loading...</span></div><div class=\"flex items-center gap-2\"><span class=\"font-medium text-gray-600\">Queue:</span> <span id=\"queue\" class=\"text-gray-600\">Loading...</span></div></div></div><div class=\"mt-6 space-y-4\"><div class=\"flex items-center gap-2\"><span class=\"font-medium text-gray-600\">Assigned Peon:</span> <a id=\"peon-link\" class=\"text-gray-500\">Loading...</a></div><div class=\"flex items-center gap-2\"><span class=\"font-medium text-gray-600\">Retries:</span> <span id=\"retry-count\" class=\"text-gray-600\">Loading...</span></div></div></div><div class=\"bg-gray-50 rounded-lg shadow-sm border border-gray-200 p-6 mb-8\"><h2 class=\"text-xl font-bold mb-6 text-gray-700\">Task Payload</h2><pre id=\"payload\" class=\"font-mono text-sm bg-gray-100 p-4 rounded-lg overflow-auto max-h-96\">Loading...</pre></div><!-- Task Result --><div class=\"bg-gray-50 rounded-lg shadow-sm border border-gray-200 p-6\"><h2 class=\"text-xl font-bold mb-6 text-gray-700\">Task Result</h2><pre id=\"result\" class=\"text-gray-500\">
\"Error displaying result\"
\"No result\"
</pre></div><div class=\"flex my-8 space-x-4\">
<button onclick=\"cancelTask()\" class=\"btn btn-warning\">Cancel Task</button></div></div>
